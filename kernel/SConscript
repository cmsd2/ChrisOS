Import('env')

if env['RELEASE']:
    debug_flag = ' -DRELEASE'
else:
    debug_flag = ' -g -DDEBUG'
if env['ACPI_DEBUG_OUTPUT']:
    acpi_debug_flag = ' -DACPI_DEBUG_OUTPUT'
else:
    acpi_debug_flag = ''

symbol_file_builder = Builder(action = '$OBJCOPY --only-keep-debug $SOURCE $TARGET')
stripped_elf_builder = Builder(action = '$OBJCOPY --strip-debug $SOURCE $TARGET')

env = env.Clone(
    CFLAGS = env['CFLAGS'] + 
    acpi_debug_flag +
    debug_flag +
    ' -nostdlib -ffreestanding -Werror -D_KERNEL' +
    ' -I$PROJECT_ROOT/kernel/$ARCH' +
    ' -I$PROJECT_ROOT/kernel' +
    ' -I$PROJECT_ROOT/include' +
    ' -I$PROJECT_ROOT/libs/uthash/src' +
    ' -I$PROJECT_ROOT/libs/acpica/source/include',
    LINKFLAGS = env['LINKFLAGS'] + ' -nostdlib -ffreestanding')
env.Append(BUILDERS = {'SymbolFile':symbol_file_builder, 'StrippedElf':stripped_elf_builder})

Export('env')

acpica_lib = env.SConscript('#libs/acpica/SConscript')

env = env.Clone(LINKFLAGS = env['LINKFLAGS'] + ' -T' + env['LINKER_SCRIPT'])
Export('env')

ia32_lib = SConscript(env['ARCH'] + '/SConscript')
boot_lib = SConscript('boot/SConscript')
drivers_lib = SConscript('drivers/SConscript')
mm_lib = SConscript('mm/SConscript')
utils_lib = SConscript('utils/SConscript')
kern_lib = SConscript('kern/SConscript')
terminal_lib = SConscript('terminal/SConscript')
tests_lib = SConscript('tests/SConscript')

kenv = env.Clone(LIBS = kern_lib + boot_lib + utils_lib + mm_lib + ia32_lib + terminal_lib + drivers_lib + tests_lib + acpica_lib + ['gcc'])
kenv['_LIBFLAGS'] = '-Wl,--start-group ' + kenv['_LIBFLAGS'] + ' -Wl,--end-group'
kernel = kenv.Program('kernel.bin', [])
Depends('kernel.bin', kenv['LINKER_SCRIPT'])

kenv.SymbolFile('kernel.sym', 'kernel.bin')
kenv.StrippedElf('kernel-stripped.bin', 'kernel.bin')

