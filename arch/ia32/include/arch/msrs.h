#ifndef IA32_ARCH_MSRS_H
#define IA32_ARCH_MSRS_H

#include <stdbool.h>
#include <stdint.h>

/* from the intel SDM */
enum ia32_arch_msrs {
	IA32_P5_MC_ADDR = 0x0,
	IA32_P5_MC_TYPE = 0x1,
	IA32_MONITOR_FILTER_SIZE = 0x6,
	IA32_TIME_STAMP_COUNTER = 0x10,
	IA32_PLATFORM_ID = 0x17,
	IA32_APIC_BASE = 0x1B,
	IA32_FEATURE_CONTROL = 0x3A, // available if CPUID.01H:ECX[bit 5 or bit 6] = 1
	IA32_TSC_ADJUST = 0x3B,
	IA32_BIOS_UPDT_TRIG = 0x79,
	IA32_BIOS_SIGN_ID = 0x8B,
	IA32_SMM_MONITOR_CTL = 0x9B,
	IA32_SMBASE = 0x9E,
	IA32_PMC0 = 0xC1,
	IA32_PMC1 = 0xC2,
	IA32_PMC2 = 0xC3,
	IA32_PMC3 = 0xC4,
	IA32_PMC4 = 0xC5,
	IA32_PMC5 = 0xC6,
	IA32_PMC6 = 0xC7,
	IA32_PMC7 = 0xC8,
	IA32_MPERF = 0xE7,
	IA32_APERF = 0xE8,
	IA32_MTRRCAP = 0xFE,
	IA32_SYSENTER_CS = 0x174,
	IA32_SYSENTER_ESP = 0x175,
	IA32_SYSENTER_EIP = 0x176,
	IA32_MCG_CAP = 0x179,
	IA32_MCG_STATUS = 0x17A,
	IA32_MCG_CTL = 0x17B,
	IA32_PERFEVTSEL0 = 0x186,
	IA32_PERFEVTSEL1 = 0x187,
	IA32_PERFEVTSEL2 = 0x188,
	IA32_PERFEVTSEL3 = 0x189,
	IA32_PERF_STATUS = 0x198,
	IA32_PERF_CTL = 0x199,
	IA32_CLOCK_MODULATION = 0x19A,
	IA32_THERM_INTERRUPT = 0x19B,
	IA32_THERM_STATUS = 0x19C,
	IA32_MISC_ENABLE = 0x1A0,
	IA32_ENERGY_PERF_BIAS = 0x1B0,
	IA32_PACKAGE_THERM_STATUS = 0x1B1,
	IA32_PACKAGE_THERM_INTERRUPT = 0x1B2,
	IA32_DEBUGCTL = 0x1D9,
	IA32_SMRR_PHYSBASE = 0x1F2,
	IA32_SMRR_PHYSMASK = 0x1F3,
	IA32_PLATFORM_DCA_CAP = 0x1F8,
	IA32_CPU_DCA_CAP = 0x1F9,
	IA32_DCA_0_CAP = 0x1FA,
	IA32_MTRR_PHYSBASE0 = 0x200,
	IA32_MTRR_PHYSMASK0 = 0x201,
	IA32_MTRR_PHYSBASE1 = 0x202,
	IA32_MTRR_PHYSMASK1 = 0x203,
	IA32_MTRR_PHYSBASE2 = 0x204,
	IA32_MTRR_PHYSMASK2 = 0x205,
	IA32_MTRR_PHYSBASE3 = 0x206,
	IA32_MTRR_PHYSMASK3 = 0x207,
	IA32_MTRR_PHYSBASE4 = 0x208,
	IA32_MTRR_PHYSMASK4 = 0x209,
	IA32_MTRR_PHYSBASE5 = 0x20A,
	IA32_MTRR_PHYSMASK5 = 0x20B,
	IA32_MTRR_PHYSBASE6 = 0x20C,
	IA32_MTRR_PHYSMASK6 = 0x20D,
	IA32_MTRR_PHYSBASE7 = 0x20E,
	IA32_MTRR_PHYSMASK7 = 0x20F,
	IA32_MTRR_PHYSBASE8 = 0x210,
	IA32_MTRR_PHYSMASK8 = 0x211,
	IA32_MTRR_PHYSBASE9 = 0x212,
	IA32_MTRR_PHYSMASK9 = 0x213,
	IA32_MTRR_FIX64K_00000 = 0x250,
	IA32_MTRR_FIX16K_80000 = 0x258,
	IA32_MTRR_FIX16K_A0000 = 0x259,
	IA32_MTRR_FIX4K_C0000 = 0x268,
	IA32_MTRR_FIX4K_C8000 = 0x269,
	IA32_MTRR_FIX4K_D0000 = 0x26A,
	IA32_MTRR_FIX4K_D8000 = 0x26B,
	IA32_MTRR_FIX4K_E0000 = 0x26C,
	IA32_MTRR_FIX4K_E8000 = 0x26D,
	IA32_MTRR_FIX4K_F0000 = 0x26E,
	IA32_MTRR_FIX4K_F8000 = 0x26F,
	IA32_PAT = 0x277,
	/* skip a few... */

	/* x2 apic: available if cPUID.01H:ECX[bit 21] == 1 */
	IA32_X2APIC_APICID = 0x802,
	IA32_X2APIC_VERSION = 0x803,
	IA32_X2APIC_TPR = 0x808,
	IA32_X2APIC_PPR = 0x80A,
	IA32_X2APIC_EOI = 0x80B,
	IA32_X2APIC_LDR = 0x80D,
	IA32_X2APIC_SIVR = 0x80F,
	IA32_X2APIC_ISR0 = 0x810,
	IA32_X2APIC_ISR1 = 0x811,
	IA32_X2APIC_ISR2 = 0x812,
	IA32_X2APIC_ISR3 = 0x813,
	IA32_X2APIC_ISR4 = 0x814,
	IA32_X2APIC_ISR5 = 0x815,
	IA32_X2APIC_ISR6 = 0x816,
	IA32_X2APIC_ISR7 = 0x817,
	IA32_X2APIC_TMR0 = 0x818,
	IA32_X2APIC_TMR1 = 0x819,
	IA32_X2APIC_TMR2 = 0x81A,
	IA32_X2APIC_TMR3 = 0x81B,
	IA32_X2APIC_TMR4 = 0x81C,
	IA32_X2APIC_TMR5 = 0x81D,
	IA32_X2APIC_TMR6 = 0x81E,
	IA32_X2APIC_TMR7 = 0x81F,
	IA32_X2APIC_IRR0 = 0x820,
	IA32_X2APIC_IRR1 = 0x821,
	IA32_X2APIC_IRR2 = 0x822,
	IA32_X2APIC_IRR3 = 0x823,
	IA32_X2APIC_IRR4 = 0x824,
	IA32_X2APIC_IRR5 = 0x825,
	IA32_X2APIC_IRR6 = 0x826,
	IA32_X2APIC_IRR7 = 0x827,
	IA32_X2APIC_ESR = 0x828,
	IA32_X2APIC_LVT_CMCI = 0x82F,
	IA32_X2APIC_ICR = 0x830,
	IA32_X2APIC_LVT_TIMER = 0x832,
	IA32_X2APIC_LVT_THERMAL = 0x833,
	IA32_X2APIC_LVT_PMI = 0x834,
	IA32_X2APIC_LVT_LINT0 = 0x835,
	IA32_X2APIC_LVT_LINT1 = 0x836,
	IA32_X2APIC_LVT_ERROR = 0x837,
	IA32_X2APIC_INIT_COUNT = 0x838,
	IA32_X2APIC_CUR_COUNT = 0x839,
	IA32_X2APIC_DIV_CONF = 0x83E,
	IA32_X2APIC_SELF_IPI = 0x83F,
	
	/* QoS available if CPUID.(EAX=07H,ECX=0):EBX.[bit 12] == 1 */
	IA32_QM_EVTSEL = 0xC8D, // see docs for availability
	IA32_QM_CTR = 0xC8E,
	IA32_PQR_ASSOC = 0xC8F, // see docs for availability
	
	/* extended feature enables e.g. SYSCALL, SYSRET, IA-32e Mode
	 * available if CPUID.80000001.EDX.[bit 20] or CPUID.80000001.EDX.[bit 29]
	 */
	IA32_EFER = (int)0xC0000080,


	/* available if CPUID.80000001.EDX.[bit 29] = 1 */
	IA32_STAR = (int)0xC0000081,
	IA32_LSTAR = (int)0xC0000082,
	IA32_FMASK = (int)0xC0000084,
	IA32_FS_BASE = (int)0xC0000100,
	IA32_GS_BASE = (int)0xC0000101,
	IA32_KERNEL_GS_BASE = (int)0xC0000102,

	/* available if CPUID.80000001.EDX[bit 27] = 1 */
	IA32_TSC_AUX = (int)0xC0000103
};

bool msrs_available();

void msrs_get(unsigned int msr, unsigned int * low, unsigned int * high);

void msrs_set(unsigned int msr, unsigned int low, unsigned int high);

#endif
